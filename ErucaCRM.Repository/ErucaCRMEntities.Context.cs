//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ErucaCRM.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    using Microsoft.WindowsAzure;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base(CloudConfigurationManager.GetSetting("Entities"))
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccountTag> AccountTags { get; set; }
        public DbSet<AccountType> AccountTypes { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<ApplicationPage> ApplicationPages { get; set; }
        public DbSet<AssociatedProduct> AssociatedProducts { get; set; }
        public DbSet<AssociationApplicationPage> AssociationApplicationPages { get; set; }
        public DbSet<CaseMessageBoard> CaseMessageBoards { get; set; }
        public DbSet<ContactTag> ContactTags { get; set; }
        public DbSet<ContentApplicationPage> ContentApplicationPages { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<CultureInformation> CultureInformations { get; set; }
        public DbSet<Industry> Industries { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<LeadSource> LeadSources { get; set; }
        public DbSet<LeadStatu> LeadStatus { get; set; }
        public DbSet<ModulePermission> ModulePermissions { get; set; }
        public DbSet<Permission> Permissions { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductContactAssociation> ProductContactAssociations { get; set; }
        public DbSet<ProductInvoiceAssociation> ProductInvoiceAssociations { get; set; }
        public DbSet<ProductLeadAssociation> ProductLeadAssociations { get; set; }
        public DbSet<ProductQuoteAssociation> ProductQuoteAssociations { get; set; }
        public DbSet<ProductSalesOrderAssociation> ProductSalesOrderAssociations { get; set; }
        public DbSet<ProfilePermission> ProfilePermissions { get; set; }
        public DbSet<Quote> Quotes { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<TaskStatu> TaskStatus { get; set; }
        public DbSet<TimeZone> TimeZones { get; set; }
        public DbSet<Rating> Ratings { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<CompanyPlan> CompanyPlans { get; set; }
        public DbSet<Module> Modules { get; set; }
        public DbSet<Plan> Plans { get; set; }
        public DbSet<PlanModule> PlanModules { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<AccountContact> AccountContacts { get; set; }
        public DbSet<LeadContact> LeadContacts { get; set; }
        public DbSet<Account> Accounts { get; set; }
        public DbSet<LeadTag> LeadTags { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Stage> Stages { get; set; }
        public DbSet<AccountCase> AccountCases { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<SalesOrder> SalesOrders { get; set; }
        public DbSet<Tag> Tags { get; set; }
        public DbSet<FileAttachment> FileAttachments { get; set; }
        public DbSet<Lead> Leads { get; set; }
        public DbSet<LeadEmailNotification> LeadEmailNotifications { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<LeadAudit> LeadAudits { get; set; }
        public DbSet<TaskItem> TaskItems { get; set; }
        public DbSet<GlobalSetting> GlobalSettings { get; set; }
        public DbSet<RealTimeNotificationConnection> RealTimeNotificationConnections { get; set; }
        public DbSet<LeadComment> LeadComments { get; set; }
    
        public virtual ObjectResult<SSP_GetAllVisibleCulture_Result> SSP_GetAllVisibleCulture()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetAllVisibleCulture_Result>("SSP_GetAllVisibleCulture");
        }
    
        public virtual ObjectResult<ssp_GetLeadHistory_Result> sp_GetLeadHistory(Nullable<int> leadId)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("leadId", leadId) :
                new ObjectParameter("leadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLeadHistory_Result>("sp_GetLeadHistory", leadIdParameter);
        }
    
        public virtual ObjectResult<string> SSP_CheckUserPlan(Nullable<int> companyId, Nullable<int> userId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SSP_CheckUserPlan", companyIdParameter, userIdParameter);
        }
    
        public virtual int SSP_GetAccountsByUserId(Nullable<int> userId, Nullable<int> companyId, string tagName, Nullable<int> tagId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_GetAccountsByUserId", userIdParameter, companyIdParameter, tagNameParameter, tagIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<Account> GetAccountsByUserId(Nullable<int> userId, Nullable<int> companyId, string tagName, Nullable<int> tagId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("GetAccountsByUserId", userIdParameter, companyIdParameter, tagNameParameter, tagIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<Account> GetAccountsByUserId(Nullable<int> userId, Nullable<int> companyId, string tagName, Nullable<int> tagId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Account>("GetAccountsByUserId", mergeOption, userIdParameter, companyIdParameter, tagNameParameter, tagIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual int SSP_DeleteStageAfterMoveLeads(Nullable<int> oldstageId, Nullable<int> newStageId)
        {
            var oldstageIdParameter = oldstageId.HasValue ?
                new ObjectParameter("OldstageId", oldstageId) :
                new ObjectParameter("OldstageId", typeof(int));
    
            var newStageIdParameter = newStageId.HasValue ?
                new ObjectParameter("NewStageId", newStageId) :
                new ObjectParameter("NewStageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_DeleteStageAfterMoveLeads", oldstageIdParameter, newStageIdParameter);
        }
    
        public virtual ObjectResult<GetLeadAnalyticData_Result> GetLeadAnalyticData(Nullable<int> companyId, string interval)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var intervalParameter = interval != null ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeadAnalyticData_Result>("GetLeadAnalyticData", companyIdParameter, intervalParameter);
        }
    
        public virtual ObjectResult<ssp_GetLeadHistory_Result> ssp_GetLeadHistory(Nullable<int> leadId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("leadId", leadId) :
                new ObjectParameter("leadId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLeadHistory_Result>("ssp_GetLeadHistory", leadIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetMonthWiseLeadCount_Result> ssp_GetMonthWiseLeadCount(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetMonthWiseLeadCount_Result>("ssp_GetMonthWiseLeadCount", companyIdParameter);
        }
    
        public virtual ObjectResult<SSP_GetYearWiseLeadCount_Result> SSP_GetYearWiseLeadCount(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetYearWiseLeadCount_Result>("SSP_GetYearWiseLeadCount", companyIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetLeadsInPipeLine_Result> ssp_GetLeadsInPipeLine(Nullable<int> companyID, string dateFilterOption)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var dateFilterOptionParameter = dateFilterOption != null ?
                new ObjectParameter("DateFilterOption", dateFilterOption) :
                new ObjectParameter("DateFilterOption", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLeadsInPipeLine_Result>("ssp_GetLeadsInPipeLine", companyIDParameter, dateFilterOptionParameter);
        }
    
        public virtual ObjectResult<ssp_GetMonthWiseAccountSaleRevenue_Result> ssp_GetMonthWiseAccountSaleRevenue(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetMonthWiseAccountSaleRevenue_Result>("ssp_GetMonthWiseAccountSaleRevenue", companyIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetAccountByTopHighestSaleRevenue_Result> ssp_GetAccountByTopHighestSaleRevenue(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAccountByTopHighestSaleRevenue_Result>("ssp_GetAccountByTopHighestSaleRevenue", companyIdParameter);
        }
    
        public virtual ObjectResult<SSP_LeadsByRatingAndStages_Result> SSP_LeadsByRatingAndStages(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_LeadsByRatingAndStages_Result>("SSP_LeadsByRatingAndStages", companyIdParameter);
        }
    
        public virtual int SSP_DeleteContact(Nullable<int> contactId)
        {
            var contactIdParameter = contactId.HasValue ?
                new ObjectParameter("contactId", contactId) :
                new ObjectParameter("contactId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_DeleteContact", contactIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetWeekWiseLeadCount_Result> ssp_GetWeekWiseLeadCount(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetWeekWiseLeadCount_Result>("ssp_GetWeekWiseLeadCount", companyIdParameter);
        }
    
        public virtual ObjectResult<Lead> GetLeadsByUserId(Nullable<int> userId, Nullable<int> companyId, Nullable<int> stageId, Nullable<int> tagId, string leadName, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(int));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("LeadName", leadName) :
                new ObjectParameter("LeadName", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("GetLeadsByUserId", userIdParameter, companyIdParameter, stageIdParameter, tagIdParameter, leadNameParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<Lead> GetLeadsByUserId(Nullable<int> userId, Nullable<int> companyId, Nullable<int> stageId, Nullable<int> tagId, string leadName, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(int));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("LeadName", leadName) :
                new ObjectParameter("LeadName", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("GetLeadsByUserId", mergeOption, userIdParameter, companyIdParameter, stageIdParameter, tagIdParameter, leadNameParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual int ssp_CreateNewDefaultCustomerProfiles(Nullable<int> companyID, ObjectParameter newAdministratorProfileId)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_CreateNewDefaultCustomerProfiles", companyIDParameter, newAdministratorProfileId);
        }
    
        public virtual ObjectResult<SSP_GetContactsByUserId_Result> SSP_GetContactsByUserId(Nullable<int> userId, Nullable<int> companyId, string tagName, Nullable<int> tagId, string filter, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetContactsByUserId_Result>("SSP_GetContactsByUserId", userIdParameter, companyIdParameter, tagNameParameter, tagIdParameter, filterParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<SSP_GetContactsByAccountId_Result> SSP_GetContactsByAccountId(Nullable<int> accountId, Nullable<int> userId, Nullable<int> companyId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetContactsByAccountId_Result>("SSP_GetContactsByAccountId", accountIdParameter, userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<SSP_GetContactsList_Result> SSP_GetContactsList(Nullable<int> userId, Nullable<int> companyId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetContactsList_Result>("SSP_GetContactsList", userIdParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<SSP_NonAssociatedContactList_Result> SSP_NonAssociatedContactList(Nullable<int> userId, Nullable<int> companyId, string filterBy, Nullable<int> filterId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var filterByParameter = filterBy != null ?
                new ObjectParameter("FilterBy", filterBy) :
                new ObjectParameter("FilterBy", typeof(string));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_NonAssociatedContactList_Result>("SSP_NonAssociatedContactList", userIdParameter, companyIdParameter, filterByParameter, filterIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        [EdmFunction("Entities", "Fun_GetContactsByUserId")]
        public virtual IQueryable<Fun_GetContactsByUserId_Result> Fun_GetContactsByUserId(Nullable<int> userid, Nullable<int> companyId)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fun_GetContactsByUserId_Result>("[Entities].[Fun_GetContactsByUserId](@userid, @CompanyId)", useridParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<SSP_GetAccountsListbyUserId_Result> SSP_GetAccountsListbyUserId_Result(Nullable<int> userid, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetAccountsListbyUserId_Result>("SSP_GetAccountsListbyUserId_Result", useridParameter, companyIdParameter, currentPageParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<SSP_LeadsListbyUserId_Result> SSP_LeadsListbyUserId(Nullable<int> userid, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_LeadsListbyUserId_Result>("SSP_LeadsListbyUserId", useridParameter, companyIdParameter, currentPageParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<SSP_GetContactForLeadAccountContacts_Result> SSP_GetContactForLeadAccountContacts(Nullable<int> userId, Nullable<int> companyId, Nullable<int> filterId, string filterby, Nullable<int> currentPage, Nullable<int> pageSize, string tagName, Nullable<int> tagId, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            var filterbyParameter = filterby != null ?
                new ObjectParameter("Filterby", filterby) :
                new ObjectParameter("Filterby", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var tagIdParameter = tagId.HasValue ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetContactForLeadAccountContacts_Result>("SSP_GetContactForLeadAccountContacts", userIdParameter, companyIdParameter, filterIdParameter, filterbyParameter, currentPageParameter, pageSizeParameter, tagNameParameter, tagIdParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetLeadExpectedRevenue_Result> ssp_GetLeadExpectedRevenue(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLeadExpectedRevenue_Result>("ssp_GetLeadExpectedRevenue", companyIdParameter);
        }
    
        public virtual int SSP_GetSalesOrderByUserId(Nullable<int> userId, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_GetSalesOrderByUserId", userIdParameter, companyIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<SSP_SalesOrderListbyUserId_Result> SSP_SalesOrderListbyUserId(Nullable<int> userid, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumnName, string sortDirection)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_SalesOrderListbyUserId_Result>("SSP_SalesOrderListbyUserId", useridParameter, companyIdParameter, currentPageParameter, pageSizeParameter, totalRecords, sortColumnNameParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<SSP_DasboardAnalyticData_Result> SSP_DasboardAnalyticData(Nullable<int> companyId, string interval)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var intervalParameter = interval != null ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_DasboardAnalyticData_Result>("SSP_DasboardAnalyticData", companyIdParameter, intervalParameter);
        }
    
        public virtual ObjectResult<Lead> SSP_GetLeadsByUserIdWeb(Nullable<int> userId, Nullable<int> companyId, Nullable<int> stageId, string tagName, string leadName, Nullable<int> currentPage, Nullable<int> pageSize, Nullable<bool> isLoadMore, Nullable<int> leadLoadMoreId, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("LeadName", leadName) :
                new ObjectParameter("LeadName", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isLoadMoreParameter = isLoadMore.HasValue ?
                new ObjectParameter("IsLoadMore", isLoadMore) :
                new ObjectParameter("IsLoadMore", typeof(bool));
    
            var leadLoadMoreIdParameter = leadLoadMoreId.HasValue ?
                new ObjectParameter("LeadLoadMoreId", leadLoadMoreId) :
                new ObjectParameter("LeadLoadMoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("SSP_GetLeadsByUserIdWeb", userIdParameter, companyIdParameter, stageIdParameter, tagNameParameter, leadNameParameter, currentPageParameter, pageSizeParameter, isLoadMoreParameter, leadLoadMoreIdParameter, totalRecords);
        }
    
        public virtual ObjectResult<Lead> SSP_GetLeadsByUserIdWeb(Nullable<int> userId, Nullable<int> companyId, Nullable<int> stageId, string tagName, string leadName, Nullable<int> currentPage, Nullable<int> pageSize, Nullable<bool> isLoadMore, Nullable<int> leadLoadMoreId, ObjectParameter totalRecords, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var stageIdParameter = stageId.HasValue ?
                new ObjectParameter("StageId", stageId) :
                new ObjectParameter("StageId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("LeadName", leadName) :
                new ObjectParameter("LeadName", typeof(string));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isLoadMoreParameter = isLoadMore.HasValue ?
                new ObjectParameter("IsLoadMore", isLoadMore) :
                new ObjectParameter("IsLoadMore", typeof(bool));
    
            var leadLoadMoreIdParameter = leadLoadMoreId.HasValue ?
                new ObjectParameter("LeadLoadMoreId", leadLoadMoreId) :
                new ObjectParameter("LeadLoadMoreId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Lead>("SSP_GetLeadsByUserIdWeb", mergeOption, userIdParameter, companyIdParameter, stageIdParameter, tagNameParameter, leadNameParameter, currentPageParameter, pageSizeParameter, isLoadMoreParameter, leadLoadMoreIdParameter, totalRecords);
        }
    
        public virtual int ssp_CreateDefaultStandardProfile(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ssp_CreateDefaultStandardProfile", companyIDParameter);
        }
    
        public virtual ObjectResult<SSP_GetContactsByLeadId_Result> SSP_GetContactsByLeadId(Nullable<int> leadId, Nullable<int> userId, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("leadId", leadId) :
                new ObjectParameter("leadId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetContactsByLeadId_Result>("SSP_GetContactsByLeadId", leadIdParameter, userIdParameter, companyIdParameter, currentPageParameter, pageSizeParameter, totalRecords);
        }
    
        public virtual ObjectResult<SSP_GetAccountCasesByUserId_Result> GetAccountCasesByUserId(Nullable<int> userId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumnName, string sortDirection)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetAccountCasesByUserId_Result>("GetAccountCasesByUserId", userIdParameter, currentPageParameter, pageSizeParameter, totalRecords, sortColumnNameParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<SSP_GetCompanyUsersInfoWithLeads_Result> SSP_GetCompanyUsersInfoWithLeads(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetCompanyUsersInfoWithLeads_Result>("SSP_GetCompanyUsersInfoWithLeads", companyIdParameter);
        }
    
        public virtual int SSP_Notifications(Nullable<int> pagesize, Nullable<int> companyId, Nullable<int> userId, ObjectParameter maxLeadAuditId, Nullable<bool> updateNotification, ObjectParameter totalRecords)
        {
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var updateNotificationParameter = updateNotification.HasValue ?
                new ObjectParameter("UpdateNotification", updateNotification) :
                new ObjectParameter("UpdateNotification", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_Notifications", pagesizeParameter, companyIdParameter, userIdParameter, maxLeadAuditId, updateNotificationParameter, totalRecords);
        }
    
        public virtual ObjectResult<SSP_GetLeadAudits_Result> SSP_GetLeadAudits(Nullable<int> userId, Nullable<int> companyId, string tagName, string leadName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("LeadName", leadName) :
                new ObjectParameter("LeadName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetLeadAudits_Result>("SSP_GetLeadAudits", userIdParameter, companyIdParameter, tagNameParameter, leadNameParameter);
        }
    
        public virtual ObjectResult<SSP_GetRecentActivitesForEmailNotification_Result> SSP_GetRecentActivitesForEmailNotification(Nullable<int> pagesize, Nullable<int> companyId, Nullable<int> userId, ObjectParameter totalRecords)
        {
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetRecentActivitesForEmailNotification_Result>("SSP_GetRecentActivitesForEmailNotification", pagesizeParameter, companyIdParameter, userIdParameter, totalRecords);
        }
    
        public virtual ObjectResult<SSP_GetActivities_Result> SSP_GetActivities(Nullable<int> userId, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize, string filter, ObjectParameter totalRecords)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActivities_Result>("SSP_GetActivities", userIdParameter, companyIdParameter, currentPageParameter, pageSizeParameter, filterParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetLeadHistoryChartDetails_Result> ssp_GetLeadHistoryChartDetails(Nullable<int> leadId)
        {
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("leadId", leadId) :
                new ObjectParameter("leadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetLeadHistoryChartDetails_Result>("ssp_GetLeadHistoryChartDetails", leadIdParameter);
        }
    
        public virtual ObjectResult<SSP_GetActivitiesByUserId_Result> SSP_GetActivitiesByUserId(Nullable<int> userId, Nullable<int> companyId, Nullable<int> currentPage, Nullable<int> pageSize, ObjectParameter totalRecords, string sortColumnName, string sortDirection)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActivitiesByUserId_Result>("SSP_GetActivitiesByUserId", userIdParameter, companyIdParameter, currentPageParameter, pageSizeParameter, totalRecords, sortColumnNameParameter, sortDirectionParameter);
        }
    
        public virtual ObjectResult<string> SSP_GetOwnerNameTask(Nullable<int> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SSP_GetOwnerNameTask", ownerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SSP_RealTimeNotifications(Nullable<int> companyId, Nullable<int> userId, Nullable<int> leadId, ObjectParameter maxLeadAuditId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SSP_RealTimeNotifications", companyIdParameter, userIdParameter, leadIdParameter, maxLeadAuditId);
        }
    
        public virtual ObjectResult<SSP_GetLeadAuditsForHomeRecentActivites_Result> SSP_GetLeadAuditsForHomeRecentActivites(Nullable<int> pagesize, Nullable<int> currentPage, Nullable<int> leadAuditId, Nullable<bool> isLoadMore, Nullable<int> companyId, Nullable<int> userId)
        {
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("Pagesize", pagesize) :
                new ObjectParameter("Pagesize", typeof(int));
    
            var currentPageParameter = currentPage.HasValue ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(int));
    
            var leadAuditIdParameter = leadAuditId.HasValue ?
                new ObjectParameter("LeadAuditId", leadAuditId) :
                new ObjectParameter("LeadAuditId", typeof(int));
    
            var isLoadMoreParameter = isLoadMore.HasValue ?
                new ObjectParameter("IsLoadMore", isLoadMore) :
                new ObjectParameter("IsLoadMore", typeof(bool));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetLeadAuditsForHomeRecentActivites_Result>("SSP_GetLeadAuditsForHomeRecentActivites", pagesizeParameter, currentPageParameter, leadAuditIdParameter, isLoadMoreParameter, companyIdParameter, userIdParameter);
        }
    }
}
